"""
Django settings for femail project.

Generated by 'django-admin startproject' using Django 1.11.7.

For more information on this file, see
https://docs.djangoproject.com/en/1.11/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/1.11/ref/settings/
"""

import os
import os.path

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/1.11/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = '#n=^787@5q&cdjs-yj&co6f&jox&2^!)gg_iv$g2t%+76#o=+q'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    #'django.contrib.sites',
    'postman',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.locale.LocaleMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'femail.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'templates')],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
                'postman.context_processors.inbox',
            ],
        },
    },
]

WSGI_APPLICATION = 'femail.wsgi.application'


# Database
# https://docs.djangoproject.com/en/1.11/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),
    }
}


# Password validation
# https://docs.djangoproject.com/en/1.11/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/1.11/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/1.11/howto/static-files/

STATIC_URL = '/static/'

EMAIL_BACKEND = 'postman.EmailBackend'

POSTMAN_I18N_URLS = True 
# Set it to True if you want the internationalization of URL pattern. Translations are provided by the
# language file.
# Default to False

POSTMAN_DISALLOW_ANONYMOUS = True
# Set it to True if you do not allow visitors to write to users. That way, messaging is restricted to a User-to-User exchange.
# Default to: False.

POSTMAN_DISALLOW_MULTIRECIPIENTS = False
# Set it to True if you do not allow more than one username in the recipient field.
# Default to: False.

POSTMAN_DISALLOW_COPIES_ON_REPLY = False
# Set it to true if you do not allow additional recipients when replying.
# Defaults to: False.

POSTMAN_DISABLE_USER_EMAILING = False 
# Set it to True if you do not want basic email notification to users.This setting does not apply to visitors (refer to POSTMAN_DISALLOW_ANONYMOUS),
# nor to a notifier application (refer to POSTMAN_NOTIFIER_APP)
# Default to: False.

# POSTMAN_FROM_EMAIL =  
# Set it if you want to override the default 'from' field value.
# Default to: Default_FROM_EMAIL. 

POSTMAN_PARAMS_EMAIL = None 
# You can customize the sending of email by this means. The value is a function, receiving one parameter: a dictionary with the same context 
# variables as for the subject and body template rendering:{'site':...,'object':...,'action':...}. The return must be a dictionary, possibly empty, with 
# django.core.mail.EmailMessage parameters as keys. 
# Default to: None.

POSTMAN_AUTO_MODERATE_AS = True
# The default moderation status when no auto-moderation functions, if any, were decisive.
# True to accept messages.
# False to reject messages.
# None to leave messages to a moderator review.
# Defaults to: None.
# To disable the moderation feature (no control, no filter):
# => Set this option to True 
# => Do not provide any auto-moderation functions.

POSTMAN_SHOW_USER_AS = 'get_full_name' 
# How to represent a User for display, in message properties: obfuscated_recipient and
# obfuscated_sender, and in the or_me filter. The value can be specified as:
# => The name of a property of User. For example: 'last_name'.
# => The name of a method of User. For example: 'get_full_name'.
# => A function, receiving the User instance as the only parameter. For example:
#    lambda u: u.get_profile().nickname.
# =>The full path to a function, as a string, whose import will be deffered. For 
# example: 'myapp.mymodule.myfunc'. The function is given the User object as the only parameter.
# This sort of reference can be useful when resolving circular import dependencies between 
# applications or modules. Another approach, not promoted but compatible, is to specify a class 
# instead of a function, like 'myapp.mymodule.MyClass'. In that case, an instance of the class is 
# initialized with the User object and its representation is the final result. 
# None: the default text representation of the User (username) is used.
# Defaults to: None.
# The default behaviour is used as a fallback when: the value names an attribute and the result is false
# (misspelled attribute name, empty result,...), or the value names a function and an exception is raised (but
# any result, even empty, is valid).

POSTMAN_NAME_USER_AS = 'get_full_name'
# How to name a User as a recipient. The value can be specified as:
# => The name of a property of User. For example: 'last_name' (in auth.User) or 'nick_name' (in a 
#    Custom User Model).
# => None: the default User model attributes are used: USERNAME_FIELD and get_username().
# Default to: None.

POSTMAN_QUICKREPLY_QUOTE_BODY = True 
# Set it to true if you want the original message to be quoted when replying directly from the display view. 
# This setting does not apply to the reply view in which quote is the basic behaviour.
# Default to: False.

POSTMAN_NOTIFIER_APP = 'notification'
# A notofier application name, used in preference to the basic emailing, to notify users to their rejected or 
# received messages.
# Defaults to: 'notification', as in django-notification.
# Note: django-notification v0.2.0 works with Django version 1.3. As of Django 1.4, switch to at least 
# django-notification v1.0.
# If you already have a notifier application with the default name in the installed application but you do
# not want it to be used by this application, set the option to None.

POSTMAN_MAILER_APP = 'mailer' 
# Defaults to: 'mailer', as in django-mailer.
# If you already have a mailer application with the default name in the istalled applications but you do not 
# want it to be used by this application, set the option to None.

POSTMAN_AUTOCOMPLETER_APP = {
    'name':'', # default is 'ajax_select'
    'field':'', # default is 'AutoCompleteField'
    'arg_name': '', # default is 'channel'
    'arg_default': 'postman_friends', # no default mandatory to enable the feature
} # default is {}
# An auto-completer application specification, useful for recipient fields. To enable the feature, define a 
# dictionary with these keys:
# => 'name'
#     The name of the auto-completer application.
#     Deafult to 'ajax_select' 
# => 'field'
#    The model class name.
#    Defaults to 'AutoCompleteField'
# => 'arg_name'
#    The name of the argument
#    Defaults to 'channel'
# => 'arg_default'
#    No default value. This is a mandatory default value, but you may supersede it in the field definition
#    of a custom form or pass it in the url pattern definitions.
# Defaults to: an empty dictionary.

POSTMAN = {
    'DEFAULT_PRIORITY': 'now',
    'LOG_LEVEL': 2, #Log only failed deliveries
    'CONTEXT_FIELD_CLASS': 'jsonfield.JSONField',
    'THREADS_PER_PROCESS':5,
}

LOGGING = {
    "version": 1,
    "disable_existing_loggers": False,
    "formatters":{
        "postman": {
            "format": "[%(levelname)s]%(asctime)s PID %(process)d: %(message)s",
            "datefmt": "%d-%m-%Y %H:%M%S",
        },
    },
    "handlers": {
        "postman":{
            "level": "DEBUG",
            "class": "logging.StreamHandler",
            "formatter": "postman"
        },
    },
}